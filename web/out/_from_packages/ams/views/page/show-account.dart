// Auto-generated from show-account.html.
// DO NOT EDIT.

library showaccount;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'dart:js';
import 'dart:html';
import '../../controller.dart';



/** Die Klasse ist das Model der Seite Account anzeigen**/
class ShowAccountComponent extends WebPage with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("show-account");
  static final __html1 = new autogenerated.OptionElement(), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <h2></h2>
        <div class="button-set" data-role="button-set" style="margin-top:10px">
          <select class="tool-button" style="width:130px; margin-right: 0px;"></select>
          <button class="tool-button" style="width:100px"><i class="icon-move-vertical"></i> move</button>
          <button class="tool-button" style="width:100px; margin-left: 7px"><span><i class="icon-remove"></i> remove</span></button>
          <button class="tool-button" style="width:100px"><i class="icon-pencil"></i> rename</button>
        </div>
        <div style="margin-top:20px" class="grid">
          <div class="row">
              <div class="span2">Username</div>
              <div class="span3"></div>
          </div>
          <div class="row">
              <div class="span2">Password</div>
              <div class="span3" id="pw"></div>
              <div class="span1"></div>
          </div>
          <div class="row">
              <div class="span2"></div>
              <div class="span3"></div>
              <button class="span1" id="showAccountButton">Decrypt</button>
          </div>
        </div>
      ''', treeSanitizer: autogenerated.nullTreeSanitizer);
  autogenerated.ButtonElement __e42, __e43, __e44, __e49;
  autogenerated.DivElement __e46, __e48;
  autogenerated.HeadingElement __e38;
  autogenerated.SelectElement __e41;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("show-account");
    setScopedCss("show-account", new autogenerated.ScopedCssMapper({"show-account":"[is=\"show-account\"]"}));
    _css = getScopedCss("show-account");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e38 = __root.nodes[1];
    var __binding37 = __t.contentBind(() => data.name, false);
    __e38.nodes.add(__binding37);
    __e41 = __root.nodes[3].nodes[1];
    __t.listen(__e41.onChange, ($event) { selectedFolder = __e41.value; });
    __t.oneWayBind(() => selectedFolder, (e) { if (__e41.value != e) __e41.value = e; }, false, false);
    __t.loopIterateAttr(__e41, () => folders, ($list, $index, __t) {
      var folder = $list[$index];
      var __e40;
      __e40 = __html1.clone(true);
      var __binding39 = __t.contentBind(() => folder.data.name, false);
      __e40.nodes.add(__binding39);
      __t.oneWayBind(() => folder.data.id.toString(), (e) { if (__e40.value != e) __e40.value = e; }, false, false);
    __t.addAll([new autogenerated.Text('\n            '),
        __e40,
        new autogenerated.Text('\n          ')]);
    });
    __e42 = __root.nodes[3].nodes[3];
    __t.listen(__e42.onClick, ($event) { move(); });
    __e43 = __root.nodes[3].nodes[5];
    __t.listen(__e43.onClick, ($event) { remove(); });
    __e44 = __root.nodes[3].nodes[7];
    __t.listen(__e44.onClick, ($event) { rename(); });
    __e46 = __root.nodes[5].nodes[1].nodes[3];
    var __binding45 = __t.contentBind(() => data.login, false);
    __e46.nodes.add(__binding45);
    __e48 = __root.nodes[5].nodes[3].nodes[3];
    var __binding47 = __t.contentBind(() => pw, false);
    __e48.nodes.add(__binding47);
    __e49 = __root.nodes[5].nodes[5].nodes[5];
    __t.listen(__e49.onClick, ($event) { decryptPw(); });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e38 = __e41 = __e42 = __e43 = __e44 = __e46 = __e48 = __e49 = null;
  }

  /** Original code from the component. */

  
  /** Variablen des Interface **/
  bool ini = false;
static  String pageUrl = 'showAccount';
  
  AccountData __$data;
  AccountData get data {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'data');
    }
    return __$data;
  }
  set data(AccountData value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'data',
          __$data, value);
    }
    __$data = value;
  }
  String pw = "*******";
  
  String __$selectedFolder = new Controller().data.folder.reversed.first.data.id.toString();
  String get selectedFolder {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'selectedFolder');
    }
    return __$selectedFolder;
  }
  set selectedFolder(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'selectedFolder',
          __$selectedFolder, value);
    }
    __$selectedFolder = value;
  }
  
  List get folders {
    return new List.from(new Controller().data.folder.reversed);
  }
  
  
  void decryptPw() {
      Crypt crypt = new Crypt();
      crypt.decryptPassword(data.pw, showDecryptedPw);
  }
  
  void showDecryptedPw(var pwDecrypted) {
    querySelector('#pw').innerHtml =  pwDecrypted.toString();
    context['jQuery']("#pw").focus().select();
    context['jQuery']('#showAccountButton').hide();
  }
  
  String getPageUrl() {
    return pageUrl + "/" + data.id.toString();
  }

  void remove() {
    var dialog = new JsObject.fromBrowserObject({
      'title'      : 'Warning..!',
      'content'    : 'Are you sure to delete the account?',
      'draggable'  : true,
      'buttonsAlign': 'right',
      'buttons'    : {
        'No': {},
        'Yes'    : {
          'action': new JsFunction.withThis(() {
            new Controller()..removeAccount(new Controller().data.account.firstWhere(
                (e) { return e.data.id == data.id;}), new Controller().data.folder.firstWhere( (e) { return e.data.id == data.folder;}).data);
          })
        }
      }
    });
    context['jQuery'].Dialog(dialog);
    
  }
  
  void move() {
    var dialog = new JsObject.fromBrowserObject({
      'title'      : 'Warning..!',
      'content'    : 'Are you sure to move the account?',
      'draggable'  : true,
      'buttonsAlign': 'right',
      'buttons'    : {
        'No': {},
        'Yes'    : {
          'action': new JsFunction.withThis(() {
            new Controller()..moveAccount(
                  new Controller().data.account.firstWhere(
                      (e) { return e.data.id == data.id;}), selectedFolder, 
                      new Controller().data.folder.firstWhere( (e) { return e.data.id == data.folder;}).data);
            this.remove();
          })
        }
      }
    });
    context['jQuery'].Dialog(dialog);
  }
  
  void rename() {
    var dialog = new JsObject.fromBrowserObject({
      'title'      : 'Warning..!',
      'content'    : 'Enter your new Accountname:<br><br><div class="input-control text"><input autofocus="true" id="accountname" type="text" /><button class="btn-clear"></button></div>',
      'draggable'  : true,
      'buttonsAlign': 'right',
      'buttons'    : {
        'No': {},
        'Yes'    : {
          'action': new JsFunction.withThis(() {
            InputElement accountnameField = querySelector('#accountname');
            String accountname = accountnameField.value;

            new Controller()..updateAccount(data..name=accountname);
            this.remove();
          })
        }
      }
    });
    context['jQuery'].Dialog(dialog);
  }
}

//# sourceMappingURL=show-account.dart.map