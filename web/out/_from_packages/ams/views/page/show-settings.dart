// Auto-generated from show-settings.html.
// DO NOT EDIT.

library showsettings;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'dart:js';
import 'package:web_ui/web_ui.dart';
import '../../controller.dart';
import '../main/menu-account.dart';
import '../../util/util.dart' as util;



/** Die Klasse ist das Model zu der Seite Account hinzufÃ¼gen. **/
class ShowSettingsComponent extends WebPage with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("show-s");
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''

  <h2>Settings</h2>
   <fieldset>
    <legend>Change Masterpassword</legend>
      <div style="margin-top: 50px" class="grid">
        <div class="row" style="width: 550px;">
          <div class="span2">Enter Masterpassword:</div>
          <div class="span3">
            <div class="input-control text">
              <input maxlength="23" type="password">
              <button class="btn-clear"></button>
            </div>
          </div>
          <div class="span1">&nbsp;</div>
        </div>
        <div class="row" style="width: 550px;">
          <div class="span2">Enter new Masterpassword:</div>
          <div class="span3">
            <div class="input-control text">
              <input type="password">
              <button class="btn-clear"></button>
            </div>
          </div>
          <div class="span1">&nbsp;</div>
        </div>
        <div id="pwRow" class="row" style="width: 550px;">
          <div class="span2">Repeat new Masterpassword:</div>
          <div class="span3">
            <div class="input-control text">
              <input id="pwFieldTest" type="password">
              <button class="btn-clear"></button>
            </div>
          </div>
        </div>
        <div class="row" style="width: 550px;">
          <div class="span2"></div>
          <div class="span3"></div>
          <button class="span1" style="width: 116px">Save</button>
        </div>
      </div>
    </fieldset>
  ''', treeSanitizer: autogenerated.nullTreeSanitizer);
  autogenerated.ButtonElement __e71;
  autogenerated.InputElement __e68, __e69, __e70;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("show-s");
    setScopedCss("show-s", new autogenerated.ScopedCssMapper({"show-s":"[is=\"show-s\"]"}));
    _css = getScopedCss("show-s");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e68 = __root.nodes[3].nodes[3].nodes[1].nodes[3].nodes[1].nodes[1];
    __t.listen(__e68.onInput, ($event) { oldMPw = __e68.value; });
    __t.oneWayBind(() => oldMPw, (e) { if (__e68.value != e) __e68.value = e; }, false, false);
    __e69 = __root.nodes[3].nodes[3].nodes[3].nodes[3].nodes[1].nodes[1];
    __t.listen(__e69.onInput, ($event) { newMPw = __e69.value; });
    __t.oneWayBind(() => newMPw, (e) { if (__e69.value != e) __e69.value = e; }, false, false);
    __e70 = __root.nodes[3].nodes[3].nodes[5].nodes[3].nodes[1].nodes[1];
    __t.listen(__e70.onInput, ($event) { newMPw2 = __e70.value; });
    __t.oneWayBind(() => newMPw2, (e) { if (__e70.value != e) __e70.value = e; }, false, false);
    __e71 = __root.nodes[3].nodes[3].nodes[7].nodes[5];
    __t.listen(__e71.onClick, ($event) { savePw(); });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e68 = __e69 = __e70 = __e71 = null;
  }

  /** Original code from the component. */


  /** Variablen des Interface **/
  bool ini = true;
static  String pageUrl = 'settings';

  String getPageUrl() {
    return pageUrl;
  }

  String __$newMPw = '';
  String get newMPw {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'newMPw');
    }
    return __$newMPw;
  }
  set newMPw(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'newMPw',
          __$newMPw, value);
    }
    __$newMPw = value;
  }

  String __$newMPw2 = '';
  String get newMPw2 {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'newMPw2');
    }
    return __$newMPw2;
  }
  set newMPw2(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'newMPw2',
          __$newMPw2, value);
    }
    __$newMPw2 = value;
  }

  String __$oldMPw = '';
  String get oldMPw {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'oldMPw');
    }
    return __$oldMPw;
  }
  set oldMPw(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'oldMPw',
          __$oldMPw, value);
    }
    __$oldMPw = value;
  }


  void init() {
    // macht jquery die textfelder bekannt damit der clearbutton funktioniert
    context['jQuery']()["Input"](new JsObject.fromBrowserObject({'initAll': true}));
  }

  savePw() {

    if(oldMPw.isNotEmpty && newMPw.isNotEmpty ) {
      Crypt crypt = new Crypt();

      String oldHash = util.hash(oldMPw);
      if(crypt.testMasterPw(oldHash) && newMPw.compareTo(newMPw2) == 0 ) {
        String newHash = util.hash(newMPw);
        crypt.sendMasterPw(newHash);
        new Controller().data.account.forEach((MenuAccount account) {
            String oldAccPw = crypt.decrypt(oldHash, account.data.pw);
            account.data.pw = crypt.crypt(newHash, oldAccPw);
            new Controller()..updateAccount(account.data);
            });
        oldMPw = '';
        newMPw = '';
        newMPw2 = '';
        var dialog = new JsObject.fromBrowserObject({
            'title'      : 'Success..!',
            'content'    : 'Masterpassword changed.!.',
            'draggable'  : true,
            'buttonsAlign': 'right',
            'buttons'    : {
            'Ok'    : {
            'action': new JsFunction.withThis(() {})
            }
            }
            });
        context['jQuery'].Dialog(dialog);
      } else {
        var dialog = new JsObject.fromBrowserObject({
            'title'      : 'Error..!',
            'content'    : 'Input does not match.!.',
            'draggable'  : true,
            'buttonsAlign': 'right',
            'buttons'    : {
            'Ok'    : {
            'action': new JsFunction.withThis(() {})
            }
            }
            });
        context['jQuery'].Dialog(dialog);
      }
    } else {
      var dialog = new JsObject.fromBrowserObject({
          'title'      : 'Error..!',
          'content'    : 'Please fillout all Datafields.',
          'draggable'  : true,
          'buttonsAlign': 'right',
          'buttons'    : {
          'Ok'    : {
          'action': new JsFunction.withThis(() {})
          }
          }
          });
      context['jQuery'].Dialog(dialog);
    }
  }
}

//# sourceMappingURL=show-settings.dart.map