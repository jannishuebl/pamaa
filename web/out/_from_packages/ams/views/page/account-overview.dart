// Auto-generated from account-overview.html.
// DO NOT EDIT.

library accountOverview;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'dart:html';
import 'dart:async';
import 'dart:js';
import '../../util/util.dart' as util;
import '../../controller.dart';
import 'elements/account-overview-element.dart';
import '../main/menu-folder.dart';



/** Die Klasse ist das Model der Seite AccountÃ¼bersicht anzeigen**/
class AccountOverview extends WebPage with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("account-overview");
  static final __html1 = new autogenerated.OptionElement(), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <h2></h2>
        <div class="button-set" data-role="button-set" style="margin-top:10px">
          <select class="tool-button" style="width:130px; margin-right: 0px;"></select>
          <button class="tool-button" style="width:100px"><i class="icon-move-vertical"></i> move</button>
          <button class="tool-button" style="width:100px; margin-left: 7px"><span><i class="icon-remove"></i> remove</span></button>
          <button class="tool-button" style="width:100px"><i class="icon-pencil"></i> rename</button>
        </div>
        <ul class="listview fluid" style="margin-top:20px">
        </ul>
      ''', treeSanitizer: autogenerated.nullTreeSanitizer);
  autogenerated.ButtonElement __e60, __e61, __e62;
  autogenerated.HeadingElement __e56;
  autogenerated.SelectElement __e59;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("account-overview");
    setScopedCss("account-overview", new autogenerated.ScopedCssMapper({"account-overview":"[is=\"account-overview\"]"}));
    _css = getScopedCss("account-overview");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e56 = __root.nodes[1];
    var __binding55 = __t.contentBind(() => folder.name, false);
    __e56.nodes.add(__binding55);
    __e59 = __root.nodes[3].nodes[1];
    __t.listen(__e59.onChange, ($event) { selectedFolder = __e59.value; });
    __t.oneWayBind(() => selectedFolder, (e) { if (__e59.value != e) __e59.value = e; }, false, false);
    __t.loopIterateAttr(__e59, () => folders, ($list, $index, __t) {
      var folder = $list[$index];
      var __e58;
      __e58 = __html1.clone(true);
      var __binding57 = __t.contentBind(() => folder.data.name, false);
      __e58.nodes.add(__binding57);
      __t.oneWayBind(() => folder.data.id.toString(), (e) { if (__e58.value != e) __e58.value = e; }, false, false);
    __t.addAll([new autogenerated.Text('\n            '),
        __e58,
        new autogenerated.Text('\n          ')]);
    });
    __e60 = __root.nodes[3].nodes[3];
    __t.listen(__e60.onClick, ($event) { move(); });
    __e61 = __root.nodes[3].nodes[5];
    __t.listen(__e61.onClick, ($event) { remove(); });
    __e62 = __root.nodes[3].nodes[7];
    __t.listen(__e62.onClick, ($event) { rename(); });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e56 = __e59 = __e60 = __e61 = __e62 = null;
  }

  /** Original code from the component. */


  /** Variablen des Interface **/
  bool ini = true;
  // Die Url der Seite
  static String pageUrl = 'accountOverview';
  
  String getPageUrl() {
    return pageUrl + "/" +folder.id.toString();
  }

  dynamic __$folder;
  dynamic get folder {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'folder');
    }
    return __$folder;
  }
  set folder(dynamic value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'folder',
          __$folder, value);
    }
    __$folder = value;
  }

  String __$selectedFolder = new Controller().data.folder.reversed.first.data.id.toString();
  String get selectedFolder {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'selectedFolder');
    }
    return __$selectedFolder;
  }
  set selectedFolder(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'selectedFolder',
          __$selectedFolder, value);
    }
    __$selectedFolder = value;
  }
  
  int id;
  
  AccountOverview(int folderid ){
    
    folder = new Controller().data.folder.firstWhere((MenuFolder e) {return e.data.id == folderid;}).data;
  }
  
  Map accounts = new Map();
  
  List get folders {
    return new List.from(new Controller().data.folder.reversed);
  }
  
  void init() {
    new Controller().data.account.reversed.forEach((e) {
      if(e.data.folder == folder.id)
      {
      var ul = querySelector('.page-region ul');
      LIElement host = new LIElement();
      
      host.id = 'acc'+e.data.id.toString();
      
      host.onMouseOver.listen((e){
        host.querySelector('.listviewSelectButton').style.display="block";
        host.querySelector('.listviewSelectButtonHaken').style.display="block";
      });
      
      host.onMouseOut.listen((e){
        if(!host.classes.contains("selected")) {
          host.querySelector('.listviewSelectButton').style.display="none";
          host.querySelector('.listviewSelectButtonHaken').style.display="none";
        }
      });
      
      AccountOverviewElement accountElement = new AccountOverviewElement(e)..host = host..folder=folder;
      util.addComponent(ul, accountElement);
      
      accounts.putIfAbsent(accountElement.account.data.id.toString(), () { return accountElement;});
      accountElement.querySelector('.listviewSelectButton').onClick.listen(clickSelect);
      accountElement.querySelector('.listviewSelectButtonHaken').onClick.listen(clickSelect);
      
      }
    });
    
    
  }
  
  void clickSelect (e) {
    (e.target.parent as Element).attributes.forEach((k,v) {
      print(k+v);
    });
   var id = (e.target as Element).attributes["account"];
   accounts[id].isSelected = true;
   context['jQuery']('#acc'+id).toggleClass('selected');
   context['jQuery']('#acc'+id+' .listviewSelectButton').toggleClass('blue');
  }
  
  void remove() {
    var dialog = new JsObject.fromBrowserObject({
      'title'      : 'Warning..!',
      'content'    : 'Are you sure to delete the accounts?',
      'draggable'  : true,
      'buttonsAlign': 'right',
      'buttons'    : {
        'No': {},
        'Yes'    : {
          'action': new JsFunction.withThis(() {
            accounts.forEach((k,AccountOverviewElement v) {
              if(v.classes.contains('selected'))  {
                new Controller()..removeAccount(v.account, folder);
              }
            });
//            new Controller()..showPage(new AccountOverview(folder.id));
            this.remove();
          })
        }
      }
    });
    context['jQuery'].Dialog(dialog);
    
  }
  
  void move() {
    var dialog = new JsObject.fromBrowserObject({
      'title'      : 'Warning..!',
      'content'    : 'Are you sure to move the accounts?',
      'draggable'  : true,
      'buttonsAlign': 'right',
      'buttons'    : {
        'No': {},
        'Yes'    : {
          'action': new JsFunction.withThis(() {
            accounts.forEach((k,AccountOverviewElement v) {
              if(v.classes.contains('selected'))  {
                new Controller()..moveAccount(v.account, selectedFolder, folder);
              }
            });
//            new Controller()..showPage(new AccountOverview(folder.id));
            this.remove();
          })
        }
      }
    });
    context['jQuery'].Dialog(dialog);
    
  }
  
  void rename() {
    var dialog = new JsObject.fromBrowserObject({
      'title'      : 'Warning..!',
      'content'    : 'Enter your new Foldername:<br><br><div class="input-control text"><input autofocus="true" id="foldername" type="text" /><button class="btn-clear"></button></div>',
      'draggable'  : true,
      'buttonsAlign': 'right',
      'buttons'    : {
        'No': {},
        'Yes'    : {
          'action': new JsFunction.withThis(() {
            InputElement foldernameField = querySelector('#foldername');
            String foldername = foldernameField.value;

                new Controller()..renameFolder(folder..name=foldername);
                new Controller()..showPage(new AccountOverview(folder.id));
            this.remove();
          })
        }
      }
    });
    context['jQuery'].Dialog(dialog);
    
  }
  
}


//# sourceMappingURL=account-overview.dart.map