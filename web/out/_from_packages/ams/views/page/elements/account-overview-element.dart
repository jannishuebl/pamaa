// Auto-generated from account-overview-element.html.
// DO NOT EDIT.

library accountOverviewElement;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'dart:html';
import 'dart:async';
import 'dart:js';
import '../../../util/util.dart' as util;
import '../../../controller.dart';
import '../../main/menu-account.dart';
import '../account-overview.dart';



/** Die Klasse ist das Model zu einem FolderItem in der SideBar **/
class AccountOverviewElement extends WebComponent {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("account-overview-element");
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <p class="listviewSelectButtonHaken"></p>
        <p class="listviewSelectButton"></p>
        <div class="icon">
          <i class="icon-locked fg-color-red"></i>
        </div>
        <div class="data">
          <h4><div style="overflow:hidden; float: left;max-width: 140px;"></div><i class="icon-remove" style="width: 13px; height:13px;float: left;margin-left: 10px;"></i></h4>
        </div>
      ''', treeSanitizer: autogenerated.nullTreeSanitizer);
  autogenerated.DivElement __e66;
  autogenerated.Element __e67;
  autogenerated.ParagraphElement __e63, __e64;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("account-overview-element");
    setScopedCss("account-overview-element", new autogenerated.ScopedCssMapper({"account-overview-element":"[is=\"account-overview-element\"]"}));
    _css = getScopedCss("account-overview-element");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e63 = __root.nodes[1];
    __t.oneWayBind(() => account.data.id.toString(), (e) { if (__e63.attributes['account'] != e) __e63.attributes['account'] = e; }, false, false);
    __e64 = __root.nodes[3];
    __t.oneWayBind(() => account.data.id.toString(), (e) { if (__e64.attributes['account'] != e) __e64.attributes['account'] = e; }, false, false);
    __e66 = __root.nodes[7].nodes[1].nodes[0];
    var __binding65 = __t.contentBind(() => account.data.name, false);
    __e66.nodes.add(__binding65);
    __e67 = __root.nodes[7].nodes[1].nodes[1];
    __t.listen(__e67.onClick, ($event) { delete(); });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e63 = __e64 = __e66 = __e67 = null;
  }

  /** Original code from the component. */

  
  bool ini = true;
  
//  @observable
  MenuAccount account;
  
  var folder;
  bool isremove = false;
  bool isSelected = false;
  
  AccountOverviewElement(this.account) {

  }
  
  init() {
    this.host.onClick.listen(open);
  }

  void open(e) {
    if(!isSelected && !isremove) account.show();
    isSelected = false;
    isremove = false;
  }
  void delete() {
    isremove = true;
    
    var dialog = new JsObject.fromBrowserObject({
      'title'      : 'Warning..!',
      'content'    : 'Are you sure to delete the account?',
      'draggable'  : true,
      'buttonsAlign': 'right',
      'buttons'    : {
        'No': {},
        'Yes'    : {
          'action': new JsFunction.withThis(() {
            new Controller()..removeAccount(account, folder);
            new Controller()..showPage(new AccountOverview(folder.id));
          })
        }
      }
    });
    context['jQuery'].Dialog(dialog);
  }
}



//# sourceMappingURL=account-overview-element.dart.map