// Auto-generated from header.html.
// DO NOT EDIT.

library header;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'dart:html';
import '../../controller.dart';




class HeaderComponent extends WebComponent with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("app-header");
  static final __html1 = new autogenerated.Element.html('<i style="margin: 5px 4px" class="icon-user-3 fg-color-black"></i>', treeSanitizer: autogenerated.nullTreeSanitizer), __html2 = new autogenerated.ImageElement(), __shadowTemplate = new autogenerated.DocumentFragment.html('''
  <div class="page-header-content">
    <div class="user-login">
      <a href="#">
        <div class="name">
          <span class="first-name"></span> <span class="last-name"></span>
        </div>  
        <div class="avatar">
           <template></template>
           <template></template>
        </div>
      </a>
    </div>
    <h1 class="fg-color-blue">
      <span>Password4u</span>
    </h1>
    <a class="back-button big page-back" style="margin-top:18px"></a>
  </div>
  ''', treeSanitizer: autogenerated.nullTreeSanitizer);
  autogenerated.AnchorElement __e13;
  autogenerated.Element __e10, __e12;
  autogenerated.SpanElement __e7, __e9;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("app-header");
    setScopedCss("app-header", new autogenerated.ScopedCssMapper({"app-header":"[is=\"app-header\"]"}));
    _css = getScopedCss("app-header");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e7 = __root.nodes[1].nodes[1].nodes[1].nodes[1].nodes[1];
    var __binding6 = __t.contentBind(() => controller.data.user.givenName, false);
    __e7.nodes.add(__binding6);
    __e9 = __root.nodes[1].nodes[1].nodes[1].nodes[1].nodes[3];
    var __binding8 = __t.contentBind(() => controller.data.user.familyName, false);
    __e9.nodes.add(__binding8);
    __e10 = __root.nodes[1].nodes[1].nodes[1].nodes[3].nodes[1];
    __t.conditional(__e10, () => controller.data.user.pictureLink.isEmpty, (__t) {
    __t.addAll([new autogenerated.Text('\n          '),
        __html1.clone(true),
        new autogenerated.Text('\n            ')]);
    });

    __e12 = __root.nodes[1].nodes[1].nodes[1].nodes[3].nodes[3];
    __t.conditional(__e12, () => controller.data.user.pictureLink.isNotEmpty, (__t) {
      var __e11;
      __e11 = __html2.clone(true);
      __t.oneWayBind(() => controller.data.user.pictureLink, (e) { if (__e11.src != e) __e11.src = e; }, false, true);
    __t.addAll([new autogenerated.Text('\n          '),
        __e11,
        new autogenerated.Text('\n          ')]);
    });

    __e13 = __root.nodes[1].nodes[5];
    __t.listen(__e13.onClick, ($event) { open(); });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e7 = __e9 = __e10 = __e12 = __e13 = null;
  }

  /** Original code from the component. */

  
  bool ini = false;
  String __$webAppHeadline = "PasswordManager";
  String get webAppHeadline {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'webAppHeadline');
    }
    return __$webAppHeadline;
  }
  set webAppHeadline(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'webAppHeadline',
          __$webAppHeadline, value);
    }
    __$webAppHeadline = value;
  }
  Controller __$controller = new Controller();
  Controller get controller {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'controller');
    }
    return __$controller;
  }
  set controller(Controller value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'controller',
          __$controller, value);
    }
    __$controller = value;
  }
  String __$givenName = new Controller().data.user.givenName;
  String get givenName {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'givenName');
    }
    return __$givenName;
  }
  set givenName(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'givenName',
          __$givenName, value);
    }
    __$givenName = value;
  }
  void open() {
    new Controller()..pageBack();
  } 
  
  void logout() {
    new Controller().auth.logout();
  }
}

//# sourceMappingURL=header.dart.map